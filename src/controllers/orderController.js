const lark = require('@larksuiteoapi/node-sdk');
const { G4F } = require("g4f");
const g4f = new G4F();
const nodemailer = require("nodemailer");

require('dotenv').config()
const WooCommerceRestApi = require("@woocommerce/woocommerce-rest-api").default;
var api = new WooCommerceRestApi({
    url: 'https://daugoiecoex.infinityfreeapp.com',
    consumerKey: 'ck_aab60ca180bfbc19f4fb4e1d787def2db7fe91ec',
    consumerSecret: 'cs_7aa3d0eba573dea5a16a2ae68fd6effab443866e',
    version: "wc/v3"
  });
  
const client = new lark.Client({
	appId: 'cli_a6c413f70239902f',
	appSecret: 'N0XyxAslf1zLBR7RyTzhzduT5AsSZhhN',
});



const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: "hoangtu4520031234@gmail.com",
      pass: "gwgz qfzh onrm aepd",
    },
  });

let webhookOrderCreate = async (req, res) => {
    try {
        let webhookSecret = req.headers['x-webhook-secret'];
        console.log('secret:', webhookSecret);
        
        const orderData = req.body;
        console.log('orderData:', orderData);

        for (let item of orderData.line_items) {
            console.log('Processing line item:', item);
            console.log('orderId',orderData.id," + ", typeof(orderData.id))
            console.log('product',item.name," + ", typeof(item.name))
            console.log('total',item.total," + ", typeof(item.total))
            console.log('quantity',item.quantity," + ", typeof(item.quantity))
            console.log('price',item.price," + ", typeof(item.price))
            try {
                const response = await client.bitable.appTableRecord.create({
                    path: {
                        app_token: process.env.LARK_APP_TOKEN || "MBIBbaiqna1IK5sHHw1lW3OogHe",
                        table_id: process.env.LARK_TABLE_ID || "tbljSPzHsyjOJKXw",
                    },
                    data: {
                        fields: {
                            "orderId": orderData.id,
                            "product": item.name,
                            "quantity": item.quantity,
                            "total": orderData.total,
                            "status": "Processing",
                            "price": item.price,
                            "address":orderData.billing.address_1,
                            "email":orderData.billing.email,
                            "phone":orderData.billing.phone
                        }
                    },
                }, lark.withUserAccessToken(process.env.AUTHORIZATION));

                console.log('Successfully created record:', response);
            } catch (err) {
                console.error('Error creating record for item:', item, 'Error:', err);
            }
        }

        res.status(200).json({ success: true, data: orderData });

    } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: error.message });
    }
};
let changeStatusOrder = async (req,res)=>{
    try {
        console.log("req query",req.query);
        const data = {
            status: req.query.status
          };
        let responseWooCommerce = await api.put(`orders/${req.query.orderId}`, data)
        console.log('2')
        const info = await transporter.sendMail({
            from: '"Ecoex üçÄ" <hoangtu4520031234@gmail.com>', // sender address
            to: req.query.gmail, // list of receivers
            subject: `C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ${req.query.orderId}`, // Subject line
            text: `Xin ch√†o,
            ƒê∆°n h√†ng c·ªßa b·∫°n v·ªõi m√£ s·ªë ${req.query.orderId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i.

            Chi ti·∫øt ƒë∆°n h√†ng:
            - M√£ ƒë∆°n h√†ng: ${req.query.orderId}
            - T√¨nh tr·∫°ng hi·ªán t·∫°i: ${req.query.status}

            C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i Ecoex. N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email n√†y ho·∫∑c g·ªçi t·ªõi s·ªë hotline: [S·ªë hotline].

            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© Ecoex üçÄ`,
            html: `
                <p>Xin ch√†o,</p>
                <p>ƒê∆°n h√†ng c·ªßa b·∫°n v·ªõi m√£ s·ªë <b>${req.query.orderId}</b> ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i.</p>
                <h3>Chi ti·∫øt ƒë∆°n h√†ng:</h3>
                <ul>
                    <li><strong>M√£ ƒë∆°n h√†ng:</strong> ${req.query.orderId}</li>
                    <li><strong>T√¨nh tr·∫°ng hi·ªán t·∫°i:</strong> ${req.query.status}</li>
                </ul>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i Ecoex. N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email n√†y ho·∫∑c g·ªçi t·ªõi s·ªë hotline: [S·ªë hotline].</p>
                <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© Ecoex üçÄ</p>
            `
            });
        
          console.log("Message sent: %s", info);

        res.status(200).json({ success: true, message: responseWooCommerce });

    } catch (error) {
        res.status(500).json({ success: false, message: error });

    }
}
var FB = require('fb');
FB.setAccessToken(process.env.FB_ACCESS_TOKEN);
let testLark = async (req, res) => {
    try {
        // const messages = [
        //     { role: "user", content: "Vi·∫øt cho t√¥i m·ªôt content v·ªÅ s·∫£n ph·∫©m d·∫ßu g·ªôi th·∫£o d∆∞·ª£c tr·∫Øc b√° di·ªáp"}
        // ];
        // let a = await g4f.chatCompletion(messages)
        // return res.status(200).json({mess:a});
        var body = 'My first post using facebook-node-sdk';
        FB.api('me/photos', 'post', { url: "https://dranh.vn/wp-content/uploads/2023/07/dau-goi-thao-duoc-350ml-3.jpg", caption: 'My vacation' }, function (res) {
            if(!res || res.error) {
              console.log(!res ? 'error occurred' : res.error);
              return;
            }
            console.log('Post Id: ' + res.post_id);
          });
           
    } catch (error) {
        console.error(error.config);
        res.status(500).json({ success: false, message: error.message });
    }
}
module.exports={
    webhookOrderCreate,
    testLark,
    changeStatusOrder
}